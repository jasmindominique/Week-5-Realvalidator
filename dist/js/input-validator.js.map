{"version":3,"sources":["input-validator.js"],"names":["InputValidator","selector","options","console","log","$fields","document","querySelectorAll","forEach","$field","domElement","el","addEventListener","validate","showErrors","previousError","querySelector","body","removeChild","errorBox","createElement","classList","add","innerHTML","errors","append","style","border","setupListeners"],"mappings":";;;;;;;;;;IAAMA,c;;;;;yBAEOC,Q,EAAUC,O,EAAQ;AAAA;;AAAE;AAC/BC,MAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ;AAEA,UAAMC,OAAO,GAAGC,QAAQ,CAACC,gBAAT,CAA0BN,QAA1B,CAAhB,CAH6B,CAGuB;;AACpDI,MAAAA,OAAO,CAACG,OAAR,CAAgB,UAACC,MAAD,EAAY;AAE5B;AAAsB,YAAI,KAAJ,CAASA,MAAT,EAAiBP,OAAjB,EAFM,CAEoB;AAC/C,OAHD;AAIA;;;AAED,0BAAYQ,UAAZ,EAAuB;AAAA;;AAAA;;AAAA,sCAYZ,UAACC,EAAD,EAAQ;AAClBR,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AAEA,KAfsB;;AAAA,4CAiBN,YAAM;AACtBD,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EADsB,CAGtB;AACA;AACA;AACA;;AACA,MAAA,MAAI,CAACK,MAAL,CAAYG,gBAAZ,CAA6B,OAA7B,EAAsC;AAAA,eAAM,MAAI,CAACC,QAAL,EAAN;AAAA,OAAtC,EAPsB,CAOuC;AAE7D;;;AACA,MAAA,MAAI,CAACJ,MAAL,CAAYG,gBAAZ,CAA6B,OAA7B,EAAsC,MAAI,CAACE,UAA3C;AAEA,KA7BsB;;AAAA,wCA+BV,YAAM;AAEZ,UAAIC,aAAa,GAAGT,QAAQ,CAACU,aAAT,CAAuB,SAAvB,CAApB;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBW,aAAxB;;AAEA,UAAGA,aAAa,KAAK,IAArB,EAA0B;AACtBT,QAAAA,QAAQ,CAACW,IAAT,CAAcC,WAAd,CAA0BH,aAA1B;AAEH;;AAED,UAAII,QAAQ,GAAGb,QAAQ,CAACc,aAAT,CAAuB,KAAvB,CAAf;AACAD,MAAAA,QAAQ,CAACE,SAAT,CAAmBC,GAAnB,CAAuB,QAAvB;AACAH,MAAAA,QAAQ,CAACI,SAAT,GAAqB,MAAI,CAACC,MAA1B;AAEAlB,MAAAA,QAAQ,CAACW,IAAT,CAAcQ,MAAd,CAAqBN,QAArB;;AAEA,UAAGA,QAAQ,CAACI,SAAZ,EAAsB;AAClB,QAAA,MAAI,CAACd,MAAL,CAAYiB,KAAZ,CAAkBC,MAAlB,GAA2B,qBAA3B;AACH;;AAEDxB,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyC,MAAI,CAACoB,MAA9C;AAEH,KArDmB;;AACtBrB,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCM,UAAhC,EADsB,CACuB;;AAE7C,SAAKD,MAAL,GAAcC,UAAd,CAHsB,CAGG;;AACzB,SAAKc,MAAL,GAAc,EAAd;AAEA,SAAKI,cAAL,GANsB,CAOtB;AACA;AAEA,G,CAAC","sourcesContent":["class InputValidator{\n\n\tstatic init(selector, options){ //this is to allow other files to have their own \n\t\tconsole.log('InputValidator.init() - I am a static validator')\n\t\n\t\tconst $fields = document.querySelectorAll(selector) //\n\t\t$fields.forEach(($field) => {\n\n\t\t/*const instance = */ new this($field, options) // the init method knows that it's the second instance, it understands that we created a new instance of \"this\" using the options parameter.  Creating a new instance using \"new\" this is a special keyword to point to \"it\". When the class is called only focus on this specific class when the init method is called it will create a a this keyword for the method that called it. this is used to create our child classes - JS knows to use whichever class that's an entry point\n\t\t})\n\t}\n\n\tconstructor(domElement){\n\t\tconsole.log('InputValidator()', domElement); //constructor sees a dom element and assigns is to this.field\n\t\t\n\t\tthis.$field = domElement //the constructor is taking a parameter that we're calling domElement\n\t\tthis.errors = []\n\n\t\tthis.setupListeners()\n\t\t// this.validate()\n\t\t// this.showErrors()\n\n\t} //this will be all common functionality between all inputs\n\n\tvalidate = (el) => {\n\t\tconsole.log('InputValidator.validate')\n\n\t}\n\n\tsetupListeners = () => {\n\t\tconsole.log('InputValidator.setupListeners')\n\n\t\t// Using () => this.validate() defers the code to listen to just listen to input.validator. (Do it when then keyup happens) evaluation of which\n\t\t// validate() method to call until  the keyup event fires, allowing \n\t\t// it to use the validate() in the child class.\n\t\t// ** On keyup run this function, which is found in required-fieldvalidator\n\t\tthis.$field.addEventListener('keyup', () => this.validate()) //run it in the child class \n\n\t\t// Using this.showErrors binds the callback immedietly to the event - within input.validator\n\t\tthis.$field.addEventListener('keyup', this.showErrors)\n\n\t}\n\n\tshowErrors = () => {\n        \n        let previousError = document.querySelector('.errors');\n        console.log(\" this is\", previousError)\n\n        if(previousError !== null){\n            document.body.removeChild(previousError);\n\n        }\n\n        let errorBox = document.createElement(\"div\");\n        errorBox.classList.add('errors')\n        errorBox.innerHTML = this.errors;\n\n        document.body.append(errorBox);\n\n        if(errorBox.innerHTML){\n            this.$field.style.border = '.2rem solid #EF3933';\n        } \n\n        console.log('InputValidator.showErrors', this.errors);\n       \n    }\n}\n\n\n"],"file":"input-validator.js"}